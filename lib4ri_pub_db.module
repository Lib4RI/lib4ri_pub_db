<?php

function lib4ri_pub_db_form_alter(&$form, &$form_state) {
    if ($form['form_step_id']['#value'] == 'lib4ridora_ingest_selector') {
        $form['doi'] = array(
            '#title' => t('Digital Object Identifier'),
            '#type' => 'textfield',
            '#description' => t('Enter an identifier for which to attempt to acquire metadata, such as: 10.1016/j.jorganchem.2011.11.018, 10.1016/j.tiv.2011.10.017, 10.1111/j.1540-4560.2012.01733.x, http://dx.doi.org/10.1111/eva.12339, or http://doi.org/10.1111/eva.12340'),
            '#element_validate' => array('lib4ri_pub_db_doi_validate_id'),
            "#default_value" => $default['doi'],
            '#states' => array(
                'visible' => array(
                    ':input[name="journal_import_method"]' => array('value' => 'doi'),
                    ':input[name="ingest_selector"]' => array('value' => 'journal_article'),
                ),
            ),
        );

        $form['eid'] = array(
            '#title' => t('Scopus ID'),
            '#type' => 'textfield',
            '#description' => t(''),
//            '#element_validate' => array('lib4ridora_doi_validate_id'),
            "#default_value" => $default['doi'],
            '#states' => array(
                'visible' => array(
                    ':input[name="journal_import_method"]' => array('value' => 'doi'),
                    ':input[name="ingest_selector"]' => array('value' => 'journal_article'),
                ),
            ),
        );
        
        $form['next']['#weight'] = 20;
    }
}


function lib4ri_pub_db_doi_validate($element, &$form_state, $form, $ingesting=FALSE) {
    // check for valid doi
    module_load_include('inc', 'lib4ridora', 'includes/utilities');
    module_load_include('inc', 'islandora_scholar', 'modules/doi/includes/utilities');
    
    $collections = ['info:fedora/'.variable_get('lib4ri_staged_ingest_public_collection'),
        'info:fedora/'.variable_get('lib4ri_staged_ingest_collection'),
        'info:fedora/'.variable_get('lib4ri_staged_ingest_live_collection')];
    
    $samedoiobjs = lib4ri_pub_db_get_objects_by_doi($element['#value']);
    
//     if ($samedoiobjs !== FALSE) {
//         $doi_in_coll = lib4ri_staged_ingest_is_doi_in_collection($samedoiobjs, $collections);
//         if ($doi_in_coll !== FALSE){
//             form_error($element, t('@doi is already present.', array(
//                 '@doi' => $element['#value'],
//             )));
//         }
//     }
    
    $doc_url = lib4ridora_doi_get_document_url(trim($element['#value']));
    $mods = lib4ri_pub_db_get_mods(trim($element['#value']));
    $mods_isla = islandora_doi_get_mods(trim($element['#value']));
    if ($mods === FALSE) {
        if ($element['#value'] == "") {
            form_error($element, t('@title is required.', array(
                '@title' => $element['#title'],
            )));
        }
        elseif (trim($element['#value']) == "") {
            form_error($element, t('"@value" is not a DOI.', array(
                '@value' => $element['#value'],
            )));
        }
        elseif ($doc_url !== FALSE) {
            if ($element['#id'] == "edit-doi") {
                form_error($element, t('"@value" does appear to be a valid DOI, but no MODS could be retrieved, so there could be an issue with the DOI configuration.', array(
                    '@value' => $element['#value'],
                )));
            }
        }
        else {
            form_error($element, t('"@value" does not appear to be a valid DOI.', array(
                '@value' => $element['#value'],
            )));
        }
        return (!$ingesting) ? $doc_url : FALSE;
    }
    return $mods;
}

/**
 * DOI-validation wrapper.
 */
function lib4ri_pub_db_doi_validate_ingest($element, &$form_state, $form) {
    if (!empty($form_state['values']['identifiers']['doi'])){
        form_load_include($form_state, 'inc', 'lib4ri_staged_ingest', 'includes/utils');
        return lib4ri_pub_db_doi_validate($element, $form_state, $form, TRUE);
    }
    else{
        return TRUE;
    }
}

/* Copied from lib4ridora_doi_validate_id - Changed doi validation function*/
function lib4ri_pub_db_doi_validate_id($element, &$form_state, $form){
    if (isset($element['#value']) && $form_state['values']['journal_import_method'] == 'doi') {
        module_load_include('inc', 'lib4ri_staged_ingest', 'includes/utils');
        //        $mods = lib4ridora_doi_validate($element, $form_state, $form, TRUE);
        $mods = lib4ri_pub_db_doi_validate($element, $form_state, $form, TRUE);
        if ($mods !== FALSE) {
            $object = islandora_ingest_form_get_object($form_state);
            if (isset($object["MODS"])) {
                $datastream = $object["MODS"];
                $datastream->setContentFromString(trim($mods->saveXML()));
                if ($datastream->label != "MODS Record") {
                    $datastream->label = "MODS Record";
                }
                if ($datastream->mimetype != 'text/xml') {
                    $datastream->mimetype = 'text/xml';
                }
            }
            else {
                $datastream = $object->constructDatastream("MODS", 'M');
                $datastream->setContentFromString(trim($mods->saveXML()));
                $datastream->label = "MODS Record";
                $datastream->mimetype = 'text/xml';
                $object->ingestDatastream($datastream);
            }
        }
    }
}

function lib4ri_pub_db_get_objects_by_doi($doi){
    module_load_include('inc', 'islandora_solr', 'includes/utilities');
    module_load_include('inc', 'islandora', 'includes/utilities');
    $doisolrfield = variable_get('lib4ridora_solr_field_document_doi', 'mods_identifier_doi_mlt');
    $collectionsolrfield = variable_get('islandora_solr_member_of_collection_field', 'RELS_EXT_isMemberOfCollection_uri_ms');
    $query = $doisolrfield . ":\"" . islandora_solr_lesser_escape(trim($doi)) . "\"";
    
    global $user;
    $original_user = $user;
    $old_state = drupal_save_session();
    drupal_save_session(FALSE);
    $user = user_load(1);
    
    $qp = new IslandoraSolrQueryProcessor();
    $qp->buildQuery($query);
    $qp->solrParams['fl'] = "PID, $doisolrfield, $collectionsolrfield";
    $qp->solrParams['sort'] = "PID asc";
    $qp->executeQuery(FALSE);
    
    $user = $original_user;
    drupal_save_session($old_state);
    
    $result = array();
    $result['objects'] = array();
    //    $result['collections'] = array();
    $result['count'] = 0;
    if (!empty($qp->islandoraSolrResult) && !empty($qp->islandoraSolrResult['response']) && isset($qp->islandoraSolrResult['response']['numFound']) && $qp->islandoraSolrResult['response']['numFound'] > 0){
        foreach ($qp->islandoraSolrResult['response']['objects'] as $curobj) {
            $pid = $curobj['PID'];
            $result['objects'][$pid] = array('pid' => $pid,
                'doi' => $curobj['solr_doc'][$doisolrfield],
                'collections' => ($curobj['solr_doc'][$collectionsolrfield] ? $curobj['solr_doc'][$collectionsolrfield] : array('')),
            );
            $result['count']++;
        }
    }
    
    if ($result['count'] == 0) {
        return FALSE;
    }
    return $result;
}

function lib4ri_pub_db_get_mods($ids){
    module_load_include('php', 'publication_DB', 'lib/MetaDataServants');
    $serv = new Crossref2ModsServant();
    return $serv->setDoi($ids)->setPid('libr:libr1129')->serve()->getProcessedDom()[0];
}