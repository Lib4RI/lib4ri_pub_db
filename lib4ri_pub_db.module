<?php

function lib4ri_pub_db_form_alter(&$form, &$form_state) {
    if ($form['form_step_id']['#value'] == 'lib4ridora_ingest_selector') {
        
        $doi = trim($_GET['doi'],'_');
        $eid = trim($_GET['eid'],'_');
        $type = trim($_GET['type'],'_');
        
        $fill_doi = false;
        switch ($type) {
            case 'Journal Article':
                $form['ingest_selector']['#default_value'] = 'journal_article';
                $fill_doi = true;
                break;
            case 'Proceeding Paper':
                $form['ingest_selector']['#default_value'] = 'proceedings_paper';
                $fill_doi = true;
                break;
        }
        
        
        if ($fill_doi){
            if (!empty($doi)){
                $default['doi'] = $doi;
                $form['journal_import_method']['#default_value'] = 'doi';
            }
            if (!empty($eid)){
                $default['eid'] = $eid;
                $form['journal_import_method']['#default_value'] = 'doi';
            }
        }
        
        $form['doi'] = array(
            '#title' => t('Digital Object Identifier'),
            '#type' => 'textfield',
            '#description' => t('Enter an identifier for which to attempt to acquire metadata, such as: 10.1016/j.jorganchem.2011.11.018, 10.1016/j.tiv.2011.10.017, 10.1111/j.1540-4560.2012.01733.x, http://dx.doi.org/10.1111/eva.12339, or http://doi.org/10.1111/eva.12340'),
            '#element_validate' => array('lib4ri_pub_db_doi_validate_id'),
            "#default_value" => $default['doi'],
            '#states' => array(
                'visible' => array(
                    ':input[name="journal_import_method"]' => array('value' => 'doi'),
                    ':input[name="ingest_selector"]' => array(array('value' => 'journal_article'),
                                                              array('value' => 'proceedings_paper')),
                ),
            ),
        );

        $form['eid'] = array(
            '#title' => t('Scopus ID'),
            '#type' => 'textfield',
            '#description' => t(''),
//            '#element_validate' => array('lib4ridora_doi_validate_id'),
            "#default_value" => $default['eid'],
            '#states' => array(
                'visible' => array(
                    ':input[name="journal_import_method"]' => array('value' => 'doi'),
                    ':input[name="ingest_selector"]' => array(array('value' => 'journal_article'),
                                                              array('value' => 'proceedings_paper')),
                    
                ),
            ),
        );
        
        $form['next']['#weight'] = 20;
    }
}


function lib4ri_pub_db_doi_validate($id_element, $id_name, $ingesting=FALSE) {
    // check for valid doi
    module_load_include('inc', 'lib4ridora', 'includes/utilities');
    module_load_include('inc', 'islandora_scholar', 'modules/doi/includes/utilities');
    $collections = array_map(function($val){return 'info:fedora/'.$val;},array_map('trim',explode(',',variable_get('lib4ri_pub_db_search_collections'))));
        
    $samedoiobjs = lib4ri_pub_db_get_objects_by_id($id_element, $id_name);
    
    if ($samedoiobjs !== FALSE) {
        $doi_in_coll = lib4ri_pub_db_is_doi_in_collection($samedoiobjs, $collections);
        if ($doi_in_coll !== FALSE){
            form_error($element, t('@doi is already present.', array(
                '@doi' => $element['#value'],
            )));
        }
    }
    
    $doc_url = lib4ridora_doi_get_document_url(trim($id_element));
    $mods = lib4ri_pub_db_get_mods(trim($id_element), $id_name);

    if ($mods === FALSE) {
        if ($id_element == "") {
            form_error($element, t('@title is required.', array(
                '@title' => $id_name,
            )));
        }
        elseif (trim($id_element) == "") {
            form_error($element, t('"@value" is not a DOI.', array(
                '@value' => $id_element,
            )));
        }
        elseif ($doc_url !== FALSE) {
            if ($element['#id'] == "edit-doi") {
                form_error($element, t('"@value" does appear to be a valid DOI, but no MODS could be retrieved, so there could be an issue with the DOI configuration.', array(
                    '@value' => $id_element,
                )));
            }
        }
        else {
            form_error($element, t('"@value" does not appear to be a valid DOI.', array(
                '@value' => $id_element,
            )));
        }
        return (!$ingesting) ? $doc_url : FALSE;
    }
    return $mods;
}

/**
 * DOI-validation wrapper.
 */
function lib4ri_pub_db_doi_validate_ingest($element, &$form_state, $form) {
    if (!empty($form_state['values']['identifiers']['doi'])){
        form_load_include($form_state, 'inc', 'lib4ri_staged_ingest', 'includes/utils');
        return lib4ri_pub_db_doi_validate($element, $form_state, $form, TRUE);
    }
    else{
        return TRUE;
    }
}

/* Copied from lib4ridora_doi_validate_id - Changed doi validation function*/
function lib4ri_pub_db_doi_validate_id($element, &$form_state, $form){
    $doi_element = $form_state['values']['doi'];
    $eid_element = $form_state['values']['eid'];
    
    if ((!empty($doi_element) ||  !empty($eid_element)) && $form_state['values']['journal_import_method'] == 'doi') {
        module_load_include('inc', 'lib4ri_staged_ingest', 'includes/utils');
        
        
        if (!empty($doi_element)){
            $id_element = $doi_element;
            $id_name = 'doi';
        }
        elseif (!empty($eid_element)){
            $id_element = $eid_element;
            $id_name = 'eid';
        }
        
        
        $mods = lib4ri_pub_db_doi_validate($id_element, $id_name, TRUE);
        if ($mods !== FALSE) {
            $object = islandora_ingest_form_get_object($form_state);
            if (isset($object["MODS"])) {
                $datastream = $object["MODS"];
                $datastream->setContentFromString(trim($mods->saveXML()));
                if ($datastream->label != "MODS Record") {
                    $datastream->label = "MODS Record";
                }
                if ($datastream->mimetype != 'text/xml') {
                    $datastream->mimetype = 'text/xml';
                }
            }
            else {
                $datastream = $object->constructDatastream("MODS", 'M');
                $datastream->setContentFromString(trim($mods->saveXML()));
                $datastream->label = "MODS Record";
                $datastream->mimetype = 'text/xml';
                $object->ingestDatastream($datastream);
            }
        }
    }
}

function lib4ri_pub_db_get_objects_by_id($id_element, $id_name){
    module_load_include('inc', 'islandora_solr', 'includes/utilities');
    module_load_include('inc', 'islandora', 'includes/utilities');
    $doisolrfield = variable_get('lib4ridora_solr_field_document_doi', 'mods_identifier_doi_mlt');
    $eidsolrfield = 'mods_identifier_scopus_mlt';
    $collectionsolrfield = variable_get('islandora_solr_member_of_collection_field', 'RELS_EXT_isMemberOfCollection_uri_ms');
    
    
    switch($id_name){
        case 'doi':
            $idsolrfield = $doisolrfield;
            break;
        case 'eid':
            $idsolrfield = $eidsolrfield;
            break;
    }
    
    $query = $idsolrfield . ":\"" . islandora_solr_lesser_escape(trim($id_element)) . "\"";
    
    global $user;
    $original_user = $user;
    $old_state = drupal_save_session();
    drupal_save_session(FALSE);
    $user = user_load(1);
    
    $qp = new IslandoraSolrQueryProcessor();
    $qp->buildQuery($query);
    $qp->solrParams['fl'] = "PID, $idsolrfield, $collectionsolrfield";
    $qp->solrParams['sort'] = "PID asc";
    $qp->executeQuery(FALSE);
    
    $user = $original_user;
    drupal_save_session($old_state);
    
    $result = array();
    $result['objects'] = array();
    //    $result['collections'] = array();
    $result['count'] = 0;
    if (!empty($qp->islandoraSolrResult) && !empty($qp->islandoraSolrResult['response']) && isset($qp->islandoraSolrResult['response']['numFound']) && $qp->islandoraSolrResult['response']['numFound'] > 0){
        foreach ($qp->islandoraSolrResult['response']['objects'] as $curobj) {
            $pid = $curobj['PID'];
            $result['objects'][$pid] = array('pid' => $pid,
                'doi' => $curobj['solr_doc'][$doisolrfield],
                'collections' => ($curobj['solr_doc'][$collectionsolrfield] ? $curobj['solr_doc'][$collectionsolrfield] : array('')),
            );
            $result['count']++;
        }
    }
    
    if ($result['count'] == 0) {
        return FALSE;
    }
    return $result;
}

function lib4ri_pub_db_get_mods($id, $id_name){
    module_load_include('php', 'publication_DB', 'lib/MetaDataServants');
    module_load_include('inc', 'lib4ri_pub_db', 'utils/classes');
//     $serv = new Crossref2ModsServant();
//     return $serv->setDoi($ids)->setPid('libr:libr1129')->serve()->getProcessedDom()[0];
    $serv = new Scopus2ModsServant();
    if ($id_name == 'doi'){
        $serv->setDoi($id);
    }    
    if ($id_name == 'eid'){
        $serv->setEid($id);
    }
    $mods = $serv->setKey(variable_get('lib4ri_pub_db_scopus_api_key'))->serve()->getProcessedDom()[0];
    
    if (isset($mods)){
        $enrich = new Lib4riMetaDataEnricher();
        $enrich->setDom($mods)->addStdName();
        $enrich->setDom($mods)->checkJournal();
        return $enrich->getDom();
    }
    else{
        return null;
    }
}


/**
 * Implements hook_menu().
 */
function lib4ri_pub_db_menu() {
    $items = array();
    
    $items['admin/islandora/lib4ri_pub_db/config'] = array(
        'title' => 'PUB db',
        'description' => 'Configure settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lib4ri_pub_db_admin_form'),
        'access arguments' => array('administer site configuration'),
        'file' => 'includes/forms.inc',
    );
    
    return $items;
}

function lib4ri_pub_db_is_doi_in_collection($samedoiobjs, $collections) {
    
    foreach ($samedoiobjs['objects'] as $object){
        if (sizeof(array_intersect($collections, $object['collections'])) > 0){
            return TRUE;
        }
    }
    return FALSE;
    
}