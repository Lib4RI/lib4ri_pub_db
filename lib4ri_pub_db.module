<?php

function lib4ri_pub_db_use_this_collection($url){
    $collections = array_map('trim',explode(',',variable_get('lib4ri_pub_db_excl_collections')));
    foreach ($collections as $collection){
        if (strpos($url, $collection)){
            return false;
        }
    }
    
    return true;
}

function lib4ri_pub_db_form_alter(&$form, &$form_state) {
    if (($form['form_step_id']['#value'] == 'lib4ridora_ingest_selector') && lib4ri_pub_db_use_this_collection($_GET['q']))  {
        
        global $user;
        
        $doi = trim($_GET['doi'],'_');
        $eid = trim($_GET['eid'],'_');
        $type = trim($_GET['type'],'_');
        
        $fill_doi = false;
        switch ($type) {
            case 'Journal Article':
                $form['ingest_selector']['#default_value'] = 'journal_article';
                $fill_doi = true;
                break;
            case 'Proceedings Paper':
                $form['ingest_selector']['#default_value'] = 'proceedings_paper';
                $fill_doi = true;
                break;
        }
        
        
        if ($fill_doi){
            if (!empty($doi)){
                $default['doi'] = $doi;
                $form['journal_import_method']['#default_value'] = 'doi';
            }
            if (!empty($eid)){
                $default['eid'] = $eid;
                $form['journal_import_method']['#default_value'] = 'doi';
            }
        }
        
        if ($form['journal_import_method']){
            $form['journal_import_method']['#states']['visible'][':input[name="ingest_selector"]'] = array(array('value' => 'journal_article'),
                                                                                                           array('value' => 'proceedings_paper'));
        
        }
        $form['doi'] = array(
            '#title' => t('Digital Object Identifier'),
            '#type' => 'textfield',
            '#description' => t('Enter an identifier for which to attempt to acquire metadata, such as: 10.1016/j.jorganchem.2011.11.018, 10.1016/j.tiv.2011.10.017, 10.1111/j.1540-4560.2012.01733.x, http://dx.doi.org/10.1111/eva.12339, or http://doi.org/10.1111/eva.12340'),
            '#element_validate' => array('lib4ri_pub_db_doi_validate_id'),
            "#default_value" => $default['doi'],
            '#states' => array(
                'visible' => array(
                    ':input[name="journal_import_method"]' => array('value' => 'doi'),
                    ':input[name="ingest_selector"]' => array(array('value' => 'journal_article'),
                                                              array('value' => 'proceedings_paper')),
                ),
            ),
        );

        if ($user->name != 'anonymous'){
            $form['eid'] = array(
                '#title' => t('Scopus ID'),
                '#type' => 'textfield',
                '#description' => t(''),
    //            '#element_validate' => array('lib4ridora_doi_validate_id'),
                "#default_value" => $default['eid'],
                '#states' => array(
                    'visible' => array(
                        ':input[name="journal_import_method"]' => array('value' => 'doi'),
                        ':input[name="ingest_selector"]' => array(array('value' => 'journal_article'),
                                                                  array('value' => 'proceedings_paper')),
                        
                    ),
                ),
            );
            
            $form['override'] = array(
                '#title' => t('Override DOI importer publication type check'),
                '#type' => 'checkbox',
                '#description' => t('Proceed with DOI importer regardless of the detected publication type'),
                "#default_value" => FALSE,
                '#states' => array(
                    'visible' => array(
                        ':input[name="journal_import_method"]' => array('value' => 'doi'),
                        ':input[name="ingest_selector"]' => array(array('value' => 'journal_article'),
                            array('value' => 'proceedings_paper')),
                    ),
                ),
            );
            
        }
        
        $form['prev']['#weight'] = 19;
        $form['next']['#weight'] = 20;
    }
    
    if ($form['form_step_id']['#value'] == 'xml_form_builder_metadata_step') {
        if (in_array('identifiers', $form) && in_array('doi', $form['identifiers'])) {
//            unset ($form['identifiers']['doi']['#element_validate']);          
            $form['identifiers']['doi']['#element_validate'] = array('lib4ri_pub_db_doi_validate_ingest');
        }
    }
}


// function lib4ri_pub_db_doi_validate($id_element, $id_name, $ingesting=FALSE) {
//     // check for valid doi
//     module_load_include('inc', 'lib4ridora', 'includes/utilities');
//     module_load_include('inc', 'islandora_scholar', 'modules/doi/includes/utilities');
//     $collections = array_map(function($val){return 'info:fedora/'.$val;},array_map('trim',explode(',',variable_get('lib4ri_pub_db_search_collections'))));
        
//     $samedoiobjs = lib4ri_pub_db_get_objects_by_id($id_element, $id_name);
    
//     if ($samedoiobjs !== FALSE) {
//         $doi_in_coll = lib4ri_pub_db_is_doi_in_collection($samedoiobjs, $collections);
//         if ($doi_in_coll !== FALSE){
//             form_error($element, t('@doi is already present.', array(
//                 '@doi' => $element['#value'],
//             )));
//         }
//     }
    
//     $doc_url = lib4ridora_doi_get_document_url(trim($id_element));
//     $mods = lib4ri_pub_db_get_mods(trim($id_element), $id_name);

//     if ($mods === FALSE) {
//         if ($id_element == "") {
//             form_error($element, t('@title is required.', array(
//                 '@title' => $id_name,
//             )));
//         }
//         elseif (trim($id_element) == "") {
//             form_error($element, t('"@value" is not a DOI.', array(
//                 '@value' => $id_element,
//             )));
//         }
//         elseif ($doc_url !== FALSE) {
//             if ($element['#id'] == "edit-doi") {
//                 form_error($element, t('"@value" does appear to be a valid DOI, but no MODS could be retrieved, so there could be an issue with the DOI configuration.', array(
//                     '@value' => $id_element,
//                 )));
//             }
//         }
//         else {
//             form_error($element, t('"@value" does not appear to be a valid DOI.', array(
//                 '@value' => $id_element,
//             )));
//         }
//         return (!$ingesting) ? $doc_url : FALSE;
//     }
//     return $mods;
// }

/**
 * DOI-validation wrapper.
 */
function lib4ri_pub_db_doi_validate_ingest($element, &$form_state, $form) {
    if (!empty($form_state['values']['identifiers']['doi'])){
//         form_load_include($form_state, 'inc', 'lib4ri_pub_db', 'includes/utils');
//         return lib4ri_pub_db_doi_validate($element, $form_state, $form, TRUE);
        module_load_include('inc', 'lib4ri_pub_db', 'utils/classes');
        $validator_instance = new DoiValidator();
        $isIn = $validator_instance->setId($element)->isInRepo();
        foreach ($validator_instance->getMessages() as $message){
            drupal_set_message($message['message'], $message['type']);
        }
        return (!$isIn);
    }
    else{
        return TRUE;
    }
}

/* Copied from lib4ridora_doi_validate_id - Changed doi validation function*/
function lib4ri_pub_db_doi_validate_id($element, &$form_state, $form){
    module_load_include('php', 'publication_DB', 'lib/MetaDataServants');
    module_load_include('inc', 'lib4ri_pub_db', 'utils/classes');
    module_load_include('inc', 'lib4ri_pub_db', 'utils/data_servant_classes');
    
    global $user;
    
    $doi_element = $form_state['values']['doi'];
    $eid_element = $form_state['values']['eid'];
    
    $selected_type = $form_state['values']['ingest_selector'];
    
    if ((!empty($doi_element) ||  !empty($eid_element)) && $form_state['values']['journal_import_method'] == 'doi') {
        module_load_include('inc', 'lib4ri_staged_ingest', 'includes/utils');
        
        if (!empty($doi_element)){
            if ($user->name != 'anonymous'){
                drupal_set_message('Using DOI to fetch data', 'status');
            }
            $validator_instance = new DoiValidator();
            $validator_instance->setId($doi_element);
        }
        elseif (!empty($eid_element)){
            if ($user->name != 'anonymous'){
                drupal_set_message('Using Scopus ID to fetch data', 'status');
            }
            $validator_instance = new EidValidator();
            $validator_instance->setId($eid_element);
        }
        

        $validator_instance->setPubType($selected_type);

        if ($form_state['values']['override'] == TRUE){
            $validator_instance->setPubTypeCheck(FALSE);
        }
        

        $mods = $validator_instance->validate()->getMods();
        
        foreach ($validator_instance->getMessages() as $message){
            drupal_set_message($message['message'], $message['type']);
        }
        
/******************************************************
        if (!empty($doi_element)){
            $id_element = $doi_element;
            $id_name = 'doi';
        }
        elseif (!empty($eid_element)){
            $id_element = $eid_element;
            $id_name = 'eid';
        }
        
        
        $mods = lib4ri_pub_db_doi_validate($id_element, $id_name, TRUE);
//***************************************************/        
        
        if ($mods == -1){
            form_error($element, '');
        }
        elseif ($mods != FALSE) {
            
            switch ($form_state['values']['ingest_selector']) {
                case 'journal_article':
                    $enricher_class = variable_get('lib4ri_pub_db_journal_enrich_class');
                    break;
                case 'proceedings_paper':
                    $enricher_class = variable_get('lib4ri_pub_db_proceedings_enrich_class');
                    break;
            }
            
            $enrich = new $enricher_class();
            $enrich->setIds(array('doi'=>$doi_element, 'eid'=>$eid_element));
            $enrich->setDom($mods);
            $enrich->enrich();
            $mods = $enrich->getDom();
            
            foreach ($enrich->getMessages() as $message){
                drupal_set_message($message['message'], $message['type']);
            }
            
            $object = islandora_ingest_form_get_object($form_state);
            if (isset($object["MODS"])) {
                $datastream = $object["MODS"];
                $datastream->setContentFromString(trim($mods->saveXML()));
                if ($datastream->label != "MODS Record") {
                    $datastream->label = "MODS Record";
                }
                if ($datastream->mimetype != 'text/xml') {
                    $datastream->mimetype = 'text/xml';
                }
            }
            else {
                $datastream = $object->constructDatastream("MODS", 'M');
                $datastream->setContentFromString(trim($mods->saveXML()));
                $datastream->label = "MODS Record";
                $datastream->mimetype = 'text/xml';
                $object->ingestDatastream($datastream);
            }
        }
        else{
            form_error($element, t('Unfortunately we could not retrieve metadata automatically for this publication, please enter the publication details manually.'));
        }
    }
}

function lib4ri_pub_db_get_objects_by_id($id_element, $id_name){
    module_load_include('inc', 'islandora_solr', 'includes/utilities');
    module_load_include('inc', 'islandora', 'includes/utilities');
    $doisolrfield = variable_get('lib4ridora_solr_field_document_doi', 'mods_identifier_doi_mlt');
    $eidsolrfield = 'mods_identifier_scopus_mlt';
    $collectionsolrfield = variable_get('islandora_solr_member_of_collection_field', 'RELS_EXT_isMemberOfCollection_uri_ms');
    
    
    switch($id_name){
        case 'doi':
            $idsolrfield = $doisolrfield;
            break;
        case 'eid':
            $idsolrfield = $eidsolrfield;
            break;
    }
    
    $query = $idsolrfield . ":\"" . islandora_solr_lesser_escape(trim($id_element)) . "\"";
    
    global $user;
    $original_user = $user;
    $old_state = drupal_save_session();
    drupal_save_session(FALSE);
    $user = user_load(1);
    
    $qp = new IslandoraSolrQueryProcessor();
    $qp->buildQuery($query);
    $qp->solrParams['fl'] = "PID, $idsolrfield, $collectionsolrfield";
    $qp->solrParams['sort'] = "PID asc";
    $qp->executeQuery(FALSE);
    
    $user = $original_user;
    drupal_save_session($old_state);
    
    $result = array();
    $result['objects'] = array();
    //    $result['collections'] = array();
    $result['count'] = 0;
    if (!empty($qp->islandoraSolrResult) && !empty($qp->islandoraSolrResult['response']) && isset($qp->islandoraSolrResult['response']['numFound']) && $qp->islandoraSolrResult['response']['numFound'] > 0){
        foreach ($qp->islandoraSolrResult['response']['objects'] as $curobj) {
            $pid = $curobj['PID'];
            $result['objects'][$pid] = array('pid' => $pid,
                'doi' => $curobj['solr_doc'][$doisolrfield],
                'collections' => ($curobj['solr_doc'][$collectionsolrfield] ? $curobj['solr_doc'][$collectionsolrfield] : array('')),
            );
            $result['count']++;
        }
    }
    
    if ($result['count'] == 0) {
        return FALSE;
    }
    return $result;
}

// function lib4ri_pub_db_get_mods($id, $id_name){
//     module_load_include('php', 'publication_DB', 'lib/MetaDataServants');
//     module_load_include('inc', 'lib4ri_pub_db', 'utils/classes');
// //     $serv = new Crossref2ModsServant();
// //     return $serv->setDoi($ids)->setPid('libr:libr1129')->serve()->getProcessedDom()[0];
//     $data_retrieveng_class = variable_get('lib4ri_pub_db_main_data_class');
//     $serv = new $data_retrieveng_class();
//     if ($id_name == 'doi'){
//         $serv->setDoi($id);
//     }    
//     if ($id_name == 'eid'){
//         $serv->setEid($id);
//     }
//     $mods = $serv->setKey(variable_get('lib4ri_pub_db_scopus_api_key'))->serve()->getProcessedDom()[0];
    
//     if (isset($mods)){
//         $enrich = new Lib4riMetaDataEnricher();
//         $enrich->setDom($mods)->addStdName();
//         $enrich->setDom($mods)->checkJournal();
//         return $enrich->getDom();
//     }
//     else{
//         return false;
//     }
// }


/**
 * Implements hook_menu().
 */
function lib4ri_pub_db_menu() {
    $items = array();
    
    $items['admin/islandora/lib4ri_pub_db/config'] = array(
        'title' => 'PUB db',
        'description' => 'Configure settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lib4ri_pub_db_admin_form'),
        'access arguments' => array('administer site configuration'),
        'file' => 'includes/forms.inc',
    );
    
    return $items;
}

function lib4ri_pub_db_is_doi_in_collection($samedoiobjs, $collections) {
    
    foreach ($samedoiobjs['objects'] as $object){
        if (sizeof(array_intersect($collections, $object['collections'])) > 0){
            return TRUE;
        }
    }
    return FALSE;
    
}